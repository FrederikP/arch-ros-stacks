diff -Naur freiburg_tools-0.1.3-orig/checkerboard_detector2/pose_visualizer.py freiburg_tools/checkerboard_detector2/pose_visualizer.py
--- freiburg_tools-0.1.3-orig/checkerboard_detector2/pose_visualizer.py	2011-02-04 09:26:29.000000000 +0100
+++ freiburg_tools/checkerboard_detector2/pose_visualizer.py	2012-05-08 17:12:51.600631377 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 import roslib; roslib.load_manifest('checkerboard_detector2')
 import rospy
diff -Naur freiburg_tools-0.1.3-orig/fr_tools/scripts/sync_bagfile.py freiburg_tools/fr_tools/scripts/sync_bagfile.py
--- freiburg_tools-0.1.3-orig/fr_tools/scripts/sync_bagfile.py	2011-02-04 09:26:28.000000000 +0100
+++ freiburg_tools/fr_tools/scripts/sync_bagfile.py	2012-05-08 17:12:51.600631377 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Script to synchronize the timings in a recorded bagfile, so that it can be 
 # played back in sync with the timestamps of the recorded data. Useful for 
diff -Naur freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph/posegraph.hpp freiburg_tools/hogman_minimal/include/hogman_minimal/graph/posegraph.hpp
--- freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph/posegraph.hpp	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/hogman_minimal/include/hogman_minimal/graph/posegraph.hpp	2012-05-08 17:28:55.587334389 +0200
@@ -18,6 +18,7 @@
 #include <queue>
 #include <iostream>
 #include <iomanip>
+#include <math.h>
 //#include "posegraph2d.hh"
 
 #define LINESIZE (4096*4)
diff -Naur freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_chol.hpp freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_chol.hpp
--- freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_chol.hpp	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_chol.hpp	2012-05-08 17:28:55.587334389 +0200
@@ -29,9 +29,9 @@
 
   template <typename PG>
   bool CholOptimizer<PG>::initialize(int rootNode){
-    if (verbose())
+    if (this->verbose())
       cerr << "# init " << rootNode << endl;
-    if (vertex(rootNode)){
+    if (this->vertex(rootNode)){
       _rootNode=rootNode;
       return true;
     }
@@ -44,14 +44,14 @@
   template <typename PG>
   int CholOptimizer<PG>::optimize(int iterations, bool online){
     Graph::VertexSet vset;
-    for (Graph::VertexIDMap::const_iterator it=vertices().begin(); it!=vertices().end(); it++){
+    for (Graph::VertexIDMap::const_iterator it=this->vertices().begin(); it!=this->vertices().end(); it++){
       vset.insert(it->second);
     }
     
-    typename PG::Vertex* root=dynamic_cast<typename PG::Vertex*>(vertex(_rootNode));
+    typename PG::Vertex* root=dynamic_cast<typename PG::Vertex*>(this->vertex(_rootNode));
     if (! root)
-      root=_MY_CAST_<typename PG::Vertex*>(vertices().begin()->second);
-    if (verbose())
+      root=_MY_CAST_<typename PG::Vertex*>(this->vertices().begin()->second);
+    if (this->verbose())
       cerr << "# root id " << root->id() << endl;
     bool initFromObservations = _guessOnEdges;
     optimizeSubset(root, vset, iterations, 0., initFromObservations);
@@ -93,7 +93,7 @@
 
     if (initFromObservations){
       initializeActiveSubsetWithObservations(rootVertex);
-      if (verbose()){
+      if (this->verbose()){
         cerr << "iteration= " << -1 
           << "\t chi2= " << this->chi2() 
           << "\t time= " << 0.0
@@ -126,7 +126,7 @@
 	double** pblock = new double*[dim];
         for (int k = 0; k < dim; ++k)
           pblock[k] = (*otherCovariance)[k];
-	typename PG::Vertex* otherVertex=_MY_CAST_<typename PG::Vertex*>(vertex(otherNode));
+	typename PG::Vertex* otherVertex=_MY_CAST_<typename PG::Vertex*>(this->vertex(otherNode));
 	int j=otherVertex->tempIndex()*dim;
 	solveAndUpdate(pblock, j,j,j+dim,j+dim);
         static TransformCovariance<PG> tCov;
@@ -136,7 +136,7 @@
       gettimeofday(&te,0);
       double dts=(te.tv_sec-ts.tv_sec)+1e-6*(te.tv_usec-ts.tv_usec);
       cumTime+=dts;
-      if (verbose()){
+      if (this->verbose()){
         cerr << "iteration= " << i 
           << "\t chi2= " << this->chi2() 
           << "\t time= " << dts 
@@ -270,8 +270,8 @@
 
   template <typename PG>
   typename PG::Edge* CholOptimizer<PG>::addEdge(typename PG::Vertex* from, typename PG::Vertex* to, const typename PG::TransformationType& mean, const typename PG::InformationType& information){
-    Graph::EdgeSet eset1=connectingEdges(from, to);
-    Graph::EdgeSet eset2=connectingEdges(to, from);
+    Graph::EdgeSet eset1=this->connectingEdges(from, to);
+    Graph::EdgeSet eset2=this->connectingEdges(to, from);
     Graph::EdgeSet eset;
     std::set_union(eset1.begin(),
 		   eset1.end(),
@@ -338,7 +338,7 @@
     origFrom->restore();
     origTo->restore();
 
-    if (0 && verbose()) {
+    if (0 && this->verbose()) {
       cerr << CL_GREEN(__PRETTY_FUNCTION__ << ": updating old edge with new measurement") << endl;
       cerr << "old mean: " << origEdge->mean().toVector() << endl;
       cerr << "new mean: " << (to==origTo ? mean.toVector() : mean.inverse().toVector()) << endl;
@@ -348,7 +348,7 @@
       cerr << " -> information:\n" << newInfo << endl;
     }
 
-    refineEdge(origEdge, newMean, newInfo);
+    this->refineEdge(origEdge, newMean, newInfo);
     return origEdge;
 
   }
@@ -575,7 +575,7 @@
     }
     ActivePathUniformCostFunction<PG> apl(this);
     dv.shortestPaths(root,&apl,maxDistance);
-    propagateAlongDijkstraTree(root, dv.adjacencyMap(), false, true); 
+    this->propagateAlongDijkstraTree(root, dv.adjacencyMap(), false, true); 
     for (typename std::set<typename PG::Edge*>::iterator it=_activeEdges.begin(); it!=_activeEdges.end(); it++){
       typename PG::Vertex* from=static_cast<typename PG::Vertex*>((*it)->from());
       typename PG::Vertex* to=static_cast<typename PG::Vertex*>((*it)->to());
diff -Naur freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_aux.hpp freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_aux.hpp
--- freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_aux.hpp	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_aux.hpp	2012-05-08 17:28:55.587334389 +0200
@@ -115,16 +115,16 @@
       hFrom->taint();
     } else
       e=PG::addEdge(from, to, mean, information);
-    _cachedChi+=chi2(e);
+    _cachedChi+=this->chi2(e);
     return e;
   };
 
 
   template <typename PG>
   void HCholOptimizer<PG>::refineEdge(typename PG::Edge* e, const typename PG::TransformationType& mean, const typename PG::InformationType& information){
-    double derr=-chi2(e);
+    double derr=-this->chi2(e);
     PG::refineEdge(e,mean,information);
-    derr+=chi2(e);
+    derr+=this->chi2(e);
     _cachedChi+=derr;
   }
 
@@ -142,8 +142,8 @@
       v2->taint();
     }
     typename PG::Edge* eAux = reinterpret_cast<typename PG::Edge*>(e);
-    _cachedChi-=chi2(eAux);
-    _lastOptChi-=chi2(eAux);
+    _cachedChi-=this->chi2(eAux);
+    _lastOptChi-=this->chi2(eAux);
     return Graph::removeEdge(e);
   }
   
diff -Naur freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_batch.hpp freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_batch.hpp
--- freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_batch.hpp	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_batch.hpp	2012-05-08 17:28:55.587334389 +0200
@@ -54,7 +54,7 @@
       if (this->verbose())
 	cerr << "Optimizing the top level" << endl;
       HVertex* rootVertex=_MY_CAST_<HVertex*>(this->vertices().begin()->second);
-      initialize(rootVertex->id());
+      this->initialize(rootVertex->id());
       //ofstream oss("topLevel.graph");
       //save(oss);
       //oss.close();
@@ -62,7 +62,7 @@
       for (Graph::VertexIDMap::const_iterator it=this->vertices().begin(); it!=this->vertices().end(); it++){
 	vset.insert(it->second);
       }
-      optimizeSubset(rootVertex, vset, iterations*3, lambda, true);
+      this->optimizeSubset(rootVertex, vset, iterations*3, lambda, true);
       if (this->verbose()) {
 	cerr << "Done";
 	//ofstream os("topLevel.dat");
diff -Naur freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_incremental.hpp freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_incremental.hpp
--- freiburg_tools-0.1.3-orig/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_incremental.hpp	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/hogman_minimal/include/hogman_minimal/graph_optimizer_hogman/graph_optimizer_hchol_incremental.hpp	2012-05-08 17:28:55.587334389 +0200
@@ -76,8 +76,8 @@
   void HCholOptimizer<PG>::propagateDownIncremental(HVertex* to, double lambda){
     if (! _lowerOptimizer)
       return;
-    transformSubset(to->lowerRoot(), *(Graph::VertexSet*)(&to->children()),to->transformation);
-    optimizeSubset(to->lowerRoot(),  *(Graph::VertexSet*)(&to->children()), _downIncrementalIterations, lambda, false);
+    this->transformSubset(to->lowerRoot(), *(Graph::VertexSet*)(&to->children()),to->transformation);
+    this->optimizeSubset(to->lowerRoot(),  *(Graph::VertexSet*)(&to->children()), _downIncrementalIterations, lambda, false);
     for (typename HVertexSet::iterator it=to->children().begin(); it!=to->children().end(); it++){
       HVertex* v=*it;
       _lowerOptimizer->propagateDownIncremental(v,lambda);
@@ -104,9 +104,9 @@
 	for(typename HVertexSet::iterator ft=pv->children().begin(); ft!=pv->children().end(); ft++){
 	  region.insert(*ft);
 	}
-	transformSubset(pv->lowerRoot(), *(Graph::VertexSet*)(&pv->children()), pv->transformation);
+	this->transformSubset(pv->lowerRoot(), *(Graph::VertexSet*)(&pv->children()), pv->transformation);
       }
-      optimizeSubset(toParent->lowerRoot(), region, _downIncrementalIterations, 1., false);
+      this->optimizeSubset(toParent->lowerRoot(), region, _downIncrementalIterations, 1., false);
     }
   }
 
@@ -155,7 +155,7 @@
             maxRot = fabs(pdeltaRot[i]);
       if (maxTrans < _translationalPropagationError && maxRot < _rotationalPropagationError)
 	continue;
-      transformSubset(parentVertex->lowerRoot(), *(Graph::VertexSet*)(&parentVertex->children()), parentVertex->transformation);
+      this->transformSubset(parentVertex->lowerRoot(), *(Graph::VertexSet*)(&parentVertex->children()), parentVertex->transformation);
       touched+=parentVertex->children().size();
       changed.insert(parentVertex);
     }
@@ -163,7 +163,7 @@
     if (propagateDown){
       for (typename HVertexSet::iterator it=changed.begin(); it!=changed.end(); it++){
 	HVertex* parentVertex=*it;
-	optimizeSubset(parentVertex->lowerRoot(), *(Graph::VertexSet*)(&parentVertex->children()), _downIncrementalIterations, 1., false);
+	this->optimizeSubset(parentVertex->lowerRoot(), *(Graph::VertexSet*)(&parentVertex->children()), _downIncrementalIterations, 1., false);
       } 
     }
     return true;
@@ -366,7 +366,7 @@
 	  HVertex* pv1=cv1->parentVertex();
 	  HVertex* pv2=cv2->parentVertex();
 	  assert(pv1 && pv2 && (pv1==hv || pv2==hv) );
-	  if (pv1!=pv2 && connectingEdges(pv1,pv2).empty() && connectingEdges(pv2,pv1).empty()){
+	  if (pv1!=pv2 && this->connectingEdges(pv1,pv2).empty() && this->connectingEdges(pv2,pv1).empty()){
 	    typename PG::InformationType info = PG::InformationType::eye(1.);
             int rotDim = PG::TransformationType::RotationType::Dimension;
             assert(rotDim + PG::TransformationType::RotationType::Angles == info.rows());
diff -Naur freiburg_tools-0.1.3-orig/hogman_minimal/src/stuff/filesys_tools.h freiburg_tools/hogman_minimal/src/stuff/filesys_tools.h
--- freiburg_tools-0.1.3-orig/hogman_minimal/src/stuff/filesys_tools.h	2011-02-04 09:26:28.000000000 +0100
+++ freiburg_tools/hogman_minimal/src/stuff/filesys_tools.h	2012-05-08 17:28:55.590667722 +0200
@@ -27,6 +27,7 @@
 
 #include <string>
 #include <vector>
+#include <unistd.h>
 
 namespace AISNavigation {
 
diff -Naur freiburg_tools-0.1.3-orig/uvc_cam2/caminfo.py freiburg_tools/uvc_cam2/caminfo.py
--- freiburg_tools-0.1.3-orig/uvc_cam2/caminfo.py	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/uvc_cam2/caminfo.py	2012-05-08 17:13:14.593965578 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 import roslib; roslib.load_manifest('uvc_cam')
 import rospy
 from sensor_msgs.msg import CameraInfo
diff -Naur freiburg_tools-0.1.3-orig/uvc_cam2/src/uvc_cam/uvc_cam.cpp freiburg_tools/uvc_cam2/src/uvc_cam/uvc_cam.cpp
--- freiburg_tools-0.1.3-orig/uvc_cam2/src/uvc_cam/uvc_cam.cpp	2011-02-04 09:26:27.000000000 +0100
+++ freiburg_tools/uvc_cam2/src/uvc_cam/uvc_cam.cpp	2012-05-08 17:13:14.593965578 +0200
@@ -1,3 +1,4 @@
+#include <unistd.h>
 #include <cstring>
 #include <string>
 #include <cstdio>
