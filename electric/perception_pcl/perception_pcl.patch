diff -Naur perception_pcl-1.0.2-orig/pcl/Makefile perception_pcl/pcl/Makefile
--- perception_pcl-1.0.2-orig/pcl/Makefile	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl/Makefile	2012-05-08 15:19:33.747041738 +0200
@@ -2,6 +2,7 @@
 
 TARBALL = build/pcl-1.1.2.tar.gz
 TARBALL_URL = https://code.ros.org/svn/release/download/thirdparty/pcl/pcl-1.1.2.tar.gz
+TARBALL_PATCH = pcl.patch
 SOURCE_DIR = build/pcl
 UNPACK_CMD = tar xzf
 include $(shell rospack find mk)/download_unpack_build.mk
diff -Naur perception_pcl-1.0.2-orig/pcl/pcl.patch perception_pcl/pcl/pcl.patch
--- perception_pcl-1.0.2-orig/pcl/pcl.patch	1970-01-01 01:00:00.000000000 +0100
+++ perception_pcl/pcl/pcl.patch	2012-05-08 15:25:01.563720763 +0200
@@ -0,0 +1,157 @@
+diff -Naur ../pcl-orig/features/include/pcl/features/impl/fpfh_omp.hpp ./features/include/pcl/features/impl/fpfh_omp.hpp
+--- ../pcl-orig/features/include/pcl/features/impl/fpfh_omp.hpp	2011-11-17 17:21:26.000000000 +0100
++++ ./features/include/pcl/features/impl/fpfh_omp.hpp	2012-05-08 15:21:32.157046203 +0200
+@@ -93,7 +93,7 @@
+     this->searchForNeighbors (p_idx, search_parameter_, nn_indices, nn_dists);
+ 
+     // Estimate the SPFH signature around p_idx
+-    computePointSPFHSignature (*surface_, *normals_, i, nn_indices, hist_f1_, hist_f2_, hist_f3_);
++    this->computePointSPFHSignature (*surface_, *normals_, i, nn_indices, hist_f1_, hist_f2_, hist_f3_);
+ 
+     // Populate a lookup table for converting a point index to its corresponding row in the spfh_hist_* matrices
+     spfh_hist_lookup[p_idx] = i;
+diff -Naur ../pcl-orig/features/include/pcl/features/impl/shot.hpp ./features/include/pcl/features/impl/shot.hpp
+--- ../pcl-orig/features/include/pcl/features/impl/shot.hpp	2011-11-17 17:21:26.000000000 +0100
++++ ./features/include/pcl/features/impl/shot.hpp	2012-05-08 15:21:32.160379536 +0200
+@@ -707,7 +707,7 @@
+   }
+ 
+   //Compute the local Reference Frame for the current 3D point
+-  getSHOTLocalRF (cloud, normals, index, indices, dists, rf);
++  this->getSHOTLocalRF (cloud, normals, index, indices, dists, rf);
+ 
+   // Clear the resultant shot
+   shot.setZero ();
+@@ -813,7 +813,7 @@
+     return;
+   }
+ 
+-  getSHOTLocalRF (cloud, normals, index, indices, dists, rf);
++  this->getSHOTLocalRF (cloud, normals, index, indices, dists, rf);
+ 
+   // Clear the resultant shot
+   shot.setZero ();
+diff -Naur ../pcl-orig/features/include/pcl/features/impl/shot_omp.hpp ./features/include/pcl/features/impl/shot_omp.hpp
+--- ../pcl-orig/features/include/pcl/features/impl/shot_omp.hpp	2011-11-17 17:21:26.000000000 +0100
++++ ./features/include/pcl/features/impl/shot_omp.hpp	2012-05-08 15:21:32.160379536 +0200
+@@ -87,7 +87,7 @@
+ #else
+     tid = 0;
+ #endif
+-    computePointSHOT (*surface_, *normals_, idx, nn_indices, nn_dists, shot[tid], rfs[tid]);
++    this->computePointSHOT (*surface_, *normals_, idx, nn_indices, nn_dists, shot[tid], rfs[tid]);
+ 
+     // Copy into the resultant cloud
+     for (int d = 0; d < shot[tid].size (); ++d)
+@@ -147,7 +147,7 @@
+ #else
+     tid = 0;
+ #endif
+-    computePointSHOT (*surface_, *normals_, idx, nn_indices, nn_dists, shot[tid], rfs[tid]);
++    this->computePointSHOT (*surface_, *normals_, idx, nn_indices, nn_dists, shot[tid], rfs[tid]);
+ 
+     // Copy into the resultant cloud
+     for (int d = 0; d < shot[tid].size (); ++d)
+diff -Naur ../pcl-orig/octree/include/pcl/octree/impl/octree_pointcloud.hpp ./octree/include/pcl/octree/impl/octree_pointcloud.hpp
+--- ../pcl-orig/octree/include/pcl/octree/impl/octree_pointcloud.hpp	2011-11-17 17:21:26.000000000 +0100
++++ ./octree/include/pcl/octree/impl/octree_pointcloud.hpp	2012-05-08 15:21:32.160379536 +0200
+@@ -205,7 +205,7 @@
+         // generate key
+         genOctreeKeyforPoint (point_arg, key);
+ 
+-        LeafT* leaf = getLeaf (key);
++        LeafT* leaf = this->getLeaf (key);
+ 
+         if (leaf)
+         {
+@@ -956,7 +956,7 @@
+         // iterate over all children
+         for (childIdx = 0; childIdx < 8; childIdx++)
+         {
+-          if (branchHasChild (*node_arg, childIdx))
++          if (this->branchHasChild (*node_arg, childIdx))
+           {
+ 
+             PointT voxelCenter;
+@@ -969,7 +969,7 @@
+             genVoxelCenterFromOctreeKey (searchEntryHeap[childIdx].key, treeDepth_arg, voxelCenter);
+ 
+             // generate new priority queue element
+-            searchEntryHeap[childIdx].node = getBranchChild (*node_arg, childIdx);
++            searchEntryHeap[childIdx].node = this->getBranchChild (*node_arg, childIdx);
+             searchEntryHeap[childIdx].pointDistance = pointSquaredDist (voxelCenter, point_arg);
+ 
+           }
+@@ -1076,10 +1076,10 @@
+         // iterate over all children
+         for (childIdx = 0; childIdx < 8; childIdx++)
+         {
+-          if (branchHasChild (*node_arg, childIdx))
++          if (this->branchHasChild (*node_arg, childIdx))
+           {
+             const OctreeNode* childNode;
+-            childNode = getBranchChild (*node_arg, childIdx);
++            childNode = this->getBranchChild (*node_arg, childIdx);
+ 
+             OctreeKey newKey;
+             PointT voxelCenter;
+@@ -1179,7 +1179,7 @@
+         // iterate over all children
+         for (childIdx = 0; childIdx < 8; childIdx++)
+         {
+-          if (branchHasChild (*node_arg, childIdx))
++          if (this->branchHasChild (*node_arg, childIdx))
+           {
+ 
+             PointT voxelCenter;
+@@ -1208,7 +1208,7 @@
+         // make sure we found at least one branch child
+         assert (minChildIdx<8);
+ 
+-        childNode = getBranchChild (*node_arg, minChildIdx);
++        childNode = this->getBranchChild (*node_arg, minChildIdx);
+ 
+         if (treeDepth_arg < this->octreeDepth_)
+         {
+@@ -1269,10 +1269,10 @@
+         // iterate over all children
+         for (childIdx = 0; childIdx < 8; childIdx++)
+         {
+-          if (branchHasChild (*node_arg, childIdx))
++          if (this->branchHasChild (*node_arg, childIdx))
+           {
+             const OctreeNode * childNode;
+-            childNode = getBranchChild (*node_arg, childIdx);
++            childNode = this->getBranchChild (*node_arg, childIdx);
+ 
+             // generate new key for current branch voxel
+             OctreeKey newKey;
+diff -Naur ../pcl-orig/registration/include/pcl/registration/impl/icp.hpp ./registration/include/pcl/registration/impl/icp.hpp
+--- ../pcl-orig/registration/include/pcl/registration/impl/icp.hpp	2011-11-17 17:21:26.000000000 +0100
++++ ./registration/include/pcl/registration/impl/icp.hpp	2012-05-08 15:22:21.033714712 +0200
+@@ -79,7 +79,7 @@
+     // Iterating over the entire index vector and  find all correspondences
+     for (size_t idx = 0; idx < indices_->size (); ++idx)
+     {
+-      if (!searchForNeighbors (output, (*indices_)[idx], nn_indices, nn_dists))
++      if (!this->searchForNeighbors (output, (*indices_)[idx], nn_indices, nn_dists))
+       {
+         PCL_ERROR ("[pcl::%s::computeTransformation] Unable to find a nearest neighbor in the target dataset for point %d in the source!\n", getClassName ().c_str (), (*indices_)[idx]);
+         return;
+diff -Naur ../pcl-orig/surface/include/pcl/surface/impl/marching_cubes_greedy.hpp ./surface/include/pcl/surface/impl/marching_cubes_greedy.hpp
+--- ../pcl-orig/surface/include/pcl/surface/impl/marching_cubes_greedy.hpp	2011-11-17 17:21:26.000000000 +0100
++++ ./surface/include/pcl/surface/impl/marching_cubes_greedy.hpp	2012-05-08 15:21:32.160379536 +0200
+@@ -72,11 +72,11 @@
+ 
+     // the vertices are shared by 8 voxels, so we need to update all 8 of them
+     HashMap neighbor_list;
+-    getNeighborList1D (cell_data, index_3d, neighbor_list);
++    this->getNeighborList1D (cell_data, index_3d, neighbor_list);
+     BOOST_FOREACH (typename HashMap::value_type entry, neighbor_list)
+     {
+       Eigen::Vector3i i3d;
+-      getIndexIn3D(entry.first, i3d);
++      this->getIndexIn3D(entry.first, i3d);
+       // if the neighbor doesn't exist, add it, otherwise we need to do an OR operation on the vertices
+       if (cell_hash_map_.find (entry.first) == cell_hash_map_.end ())
+       {
diff -Naur perception_pcl-1.0.2-orig/pcl/vtk_include.cmake perception_pcl/pcl/vtk_include.cmake
--- perception_pcl-1.0.2-orig/pcl/vtk_include.cmake	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl/vtk_include.cmake	2012-05-08 15:18:32.450372757 +0200
@@ -1,3 +1,4 @@
+set(VTK_INSTALL_EXPORT_NAME True)
 find_package (VTK REQUIRED)
 execute_process (COMMAND echo ${VTK_INCLUDE_DIRS} COMMAND sed "s/ / -I/g")
 
diff -Naur perception_pcl-1.0.2-orig/pcl/vtk_library.cmake perception_pcl/pcl/vtk_library.cmake
--- perception_pcl-1.0.2-orig/pcl/vtk_library.cmake	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl/vtk_library.cmake	2012-05-08 15:18:32.450372757 +0200
@@ -1,2 +1,3 @@
+set(VTK_INSTALL_EXPORT_NAME True)
 find_package (VTK REQUIRED)
 execute_process (COMMAND echo ${VTK_LIBRARY_DIRS})
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/EuclideanClusterExtraction.cfg perception_pcl/pcl_ros/cfg/EuclideanClusterExtraction.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/EuclideanClusterExtraction.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/EuclideanClusterExtraction.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/ExtractIndices.cfg perception_pcl/pcl_ros/cfg/ExtractIndices.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/ExtractIndices.cfg	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl_ros/cfg/ExtractIndices.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/ExtractPolygonalPrismData.cfg perception_pcl/pcl_ros/cfg/ExtractPolygonalPrismData.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/ExtractPolygonalPrismData.cfg	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl_ros/cfg/ExtractPolygonalPrismData.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/Feature.cfg perception_pcl/pcl_ros/cfg/Feature.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/Feature.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/Feature.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/Filter.cfg perception_pcl/pcl_ros/cfg/Filter.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/Filter.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/Filter.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/Filter_common.py perception_pcl/pcl_ros/cfg/Filter_common.py
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/Filter_common.py	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/Filter_common.py	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/MLS.cfg perception_pcl/pcl_ros/cfg/MLS.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/MLS.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/MLS.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/SACSegmentation.cfg perception_pcl/pcl_ros/cfg/SACSegmentation.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/SACSegmentation.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/SACSegmentation.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/SACSegmentation_common.py perception_pcl/pcl_ros/cfg/SACSegmentation_common.py
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/SACSegmentation_common.py	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl_ros/cfg/SACSegmentation_common.py	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/SACSegmentationFromNormals.cfg perception_pcl/pcl_ros/cfg/SACSegmentationFromNormals.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/SACSegmentationFromNormals.cfg	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl_ros/cfg/SACSegmentationFromNormals.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/SegmentDifferences.cfg perception_pcl/pcl_ros/cfg/SegmentDifferences.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/SegmentDifferences.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/SegmentDifferences.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/StatisticalOutlierRemoval.cfg perception_pcl/pcl_ros/cfg/StatisticalOutlierRemoval.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/StatisticalOutlierRemoval.cfg	2012-05-08 15:17:37.503704018 +0200
+++ perception_pcl/pcl_ros/cfg/StatisticalOutlierRemoval.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
diff -Naur perception_pcl-1.0.2-orig/pcl_ros/cfg/VoxelGrid.cfg perception_pcl/pcl_ros/cfg/VoxelGrid.cfg
--- perception_pcl-1.0.2-orig/pcl_ros/cfg/VoxelGrid.cfg	2012-05-08 15:17:37.507037356 +0200
+++ perception_pcl/pcl_ros/cfg/VoxelGrid.cfg	2012-05-08 15:18:32.450372757 +0200
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/env python2
 
 # set up parameters that we care about
 PACKAGE = 'pcl_ros'
